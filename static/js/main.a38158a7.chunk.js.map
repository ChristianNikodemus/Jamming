{"version":3,"sources":["logo.svg","util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","accessToken","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","search","bind","assertThisInitialized","handleTermChange","onSearch","state","term","event","setState","target","value","react_default","a","createElement","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","isRemoval","href","onRemove","name","artist","album","defineProperty","TrackList","tracks","map","index","Components_Track_Track","key","SearchResults","Components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","fetch","headers","Authorization","then","response","json","items","id","artists","uri","savePlaylist","playlistName","trackURIs","length","userID","jsonResponse","playlistID","method","body","JSON","stringify","App","updatePlaylistName","find","savedTrack","newPlaylistTracks","Array","from","push","newTracks","filter","_this2","results","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a38158a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport App from '../Components/App/App';\n\n\nconst clientID = \"6bdd6beb98b54d819b4d95754f953152\";\n\nconst redirectURI = \"http://Jamming.surge.sh\";\n\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n      if (accessTokenMatch && expiresInMatch) {\n        accessToken = accessTokenMatch[1];\n        const expiresIn = Number(expiresInMatch[1]);\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/');\n        return accessToken;\n      } else {\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n        window.location = accessUrl;\n      }\n    }\n  },\n  search(term) {\n    this.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,{\n      headers: {Authorization: `Bearer ${accessToken}`}\n    }).then(response => {\n      return response.json();\n    }).then(response => {\n      if (!response.tracks) {\n        return [];\n      } else {\n        return response.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          })\n        )\n      }\n    })\n  },\n  savePlaylist(playlistName, trackURIs) {\n    if (playlistName && trackURIs.length) {\n    } else {\n      return;\n    }\n    let accessToken = this.getAccessToken();\n    let headers = {Authorization: `Bearer ${this.getAccessToken()}`};\n    let userID;\n\n    // fetch GET Statement\n    return fetch(`https://api.spotify.com/v1/me`,{headers: headers}).then(response =>\n      response.json()).then(jsonResponse => {\n      userID = jsonResponse.id;\n\n      // fetch POST Statement that creates a new playlist\n      let playlistID;\n      return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,{\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: playlistName})\n      }).then(jsonResponse => {\n        playlistID = jsonResponse.id;\n\n        // fetch POST Statement that adds tracks to playlist\n        return fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`,{\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uri: trackURIs})\n        })\n      })\n    })\n  }\n}\n\n\nexport default Spotify;\n","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term)\n  }\n\n  handleTermChange(event) {\n    this.setState({term: event.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input onChange={this.handleTermChange}\n        placeholder=\"Enter A Song, Album, or Artist\" />\n        <a onClick={this.search} >SEARCH</a>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addTrack = this.addTrack.bind(this);\n\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  renderAction() {\n    if (this.props.isRemoval) {\n      return <a href=\"#\" className=\"Track-action\" onClick={this.removeTrack}>-</a>\n    }\n    return <a href=\"#\" className=\"Track-action\" onClick={this.addTrack}>+</a>\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name\n          }</h3>\n          <p>{this.props.track.artist} {this.props.track.album}\n          </p>\n        </div>\n        <a href=\"#\" className=\"Track-action\"\n        onClick={this.addTrack}\n        onClick={this.removeTrack} >{// + or - will go here\n        }</a>\n      </div>\n    );\n  }\n}\n\nexport default Track;\n","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\nimport App from '../App/App';\n\nclass TrackList extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"TrackList\">\n      {\n        this.props.tracks.map((track, index) => {\n          return <Track track={track}\n          key={index}\n          onAdd={this.props.onAdd}\n          isRemoval={this.props.isRemoval}\n          onRemove={this.props.onRemove} />\n        })\n      }\n      </div>\n    );\n  }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\nimport App from '../App/App';\n\nclass SearchResults extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input onChange={this.handleNameChange} defaultValue={'New Playlist'}/>\n        <TrackList tracks={this.props.playlistTracks}\n        onRemove={this.props.onRemove}\n        isRemoval={true} />\n        <a className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</a>\n      </div>\n    );\n  }\n}\n\nexport default Playlist;\n","import React from 'react';\nimport logo from '../../logo.svg';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n\n      playlistTracks: [],\n\n      playlistName: [\"\"],\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    } else {\n      let newPlaylistTracks = Array.from(this.state.playlistTracks);\n      newPlaylistTracks.push(track);\n      this.setState({\n        playlistTracks: newPlaylistTracks\n      });\n    }\n  }\n\n  removeTrack(track) {\n    let newTracks = this.state.playlistTracks.filter(savedTrack => savedTrack.id !== track.id)\n    this.setState({\n      playlistTracks: newTracks\n    });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri)\n  }\n\n  search(term) {\n    Spotify.search(term).then(results => {\n      this.setState({searchResults: results})\n    })\n  }\n\n  render() {\n    return (\n      <div>\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n        <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}/>\n            <Playlist playlistName={this.state.playlistName}\n            playlistTracks={this.state.playlistTracks}\n            onRemove={this.removeTrack}\n            onNameChange={this.updatePlaylistName} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}